name: Build kernels

on:
  push:
    paths:
      - ".github/workflows/kernel.yml"
  workflow_dispatch:
  schedule:
    - cron: "14 13 * * 5"

jobs:
  Read-configuration:
    name: üêÇ Parse *.config.json
    runs-on: ubuntu-latest
    outputs:
      CONFIGS: ${{ steps.generate-matrix.outputs.CONFIGS }}
      BUILD_DATE: ${{ steps.generate-builddate.outputs.BUILDDATE }}
    steps:
      - name: üòÑ Checkout
        uses: actions/checkout@v4

      - name: üòÜ Generate Matrix
        id: generate-matrix
        run: |
          echo "CONFIGS<<EOF" >> $GITHUB_OUTPUT
          jq -s '[.[][]]' Kernel/configs/*.config.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: ‚è∞ Set builddate
        id: generate-builddate
        run: echo "BUILDDATE=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

  Build-Kernel:
    name: "üêé Build kernel with SUSFS"
    runs-on: ubuntu-latest
    needs:
      - Read-configuration
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        CONFIG: ${{ fromJSON(needs.Read-configuration.outputs.CONFIGS) }}
    env:
      WORKSPACE: ${{ github.workspace }}
      BUILD_DATE: "${{ needs.Read-configuration.outputs.BUILD_DATE }}"
      KERNEL_NAME: ${{ matrix.CONFIG.kernelSource.name }}
      KERNEL_REPO: "https://github.com/msnx/KernelSU-Pixel4XL"
      KERNEL_BRANCH: "master"
      KERNEL_DEVICE: "Pixel 4 XL"
      KERNEL_DEFCONFIG_PATH: "arch/arm64/configs/pixel4xl_defconfig"
      ENABLE_KERNELSU: true
      ENABLE_SUSFS: true
      ENABLE_CCACHE: ${{ matrix.CONFIG.enableCcache }}
      OUT_DIR: "${{ github.workspace }}/out"
      CCACHE_DIR: "${{ github.workspace }}/ccache"
    steps:
      - name: üìê Set swap to 10G
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 10

      - name: üòÑ Checkout
        uses: actions/checkout@v4

      - name: ‚≠ê Install prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y curl git wget libarchive-tools ccache python3

      - name: üåü Clone SUSFS repository
        run: |
          git clone https://gitlab.com/simonpunk/susfs4ksu.git
          cd susfs4ksu

      - name: üí´ Apply SUSFS kernel patches
        run: |
          cd ${{ github.workspace }}/$KERNEL_NAME
          cp ${{ github.workspace }}/susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch $KERNEL_ROOT/KernelSU/
          cp ${{ github.workspace }}/susfs4ksu/kernel_patches/50_add_susfs_in_kernel.patch $KERNEL_ROOT/
          cp -r ${{ github.workspace }}/susfs4ksu/kernel_patches/fs/* $KERNEL_ROOT/fs/
          cp -r ${{ github.workspace }}/susfs4ksu/kernel_patches/include/linux/* $KERNEL_ROOT/include/linux/
          cd $KERNEL_ROOT/KernelSU && patch -p1 < 10_enable_susfs_for_ksu.patch
          cd $KERNEL_ROOT && patch -p1 < 50_add_susfs_in_kernel.patch

      - name: ‚öôÔ∏è Enable SUSFS and KSU features
        run: |
          cd ${{ github.workspace }}/$KERNEL_NAME
          echo "CONFIG_KSU=y" >> .config
          echo "CONFIG_KSU_SUSFS=y" >> .config
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> .config
          make oldconfig

      - name: üëç Start building the kernel
        working-directory: ${{ env.KERNEL_NAME }}
        run: |
          make O=${{ env.OUT_DIR }} ARCH=arm64 -j$(nproc)

      - name: üìÇ Check if Image exists
        run: |
          echo "Checking if Image exists in the output directory"
          ls -la ${{ env.OUT_DIR }}/arch/arm64/boot/

      - name: üõ†Ô∏è Build ksu_susfs tool
        run: |
          cd ${{ github.workspace }}/susfs4ksu
          ./build_ksu_susfs_tool.sh

      - name: üíæ Upload Image
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}-Image
          path: ${{ env.OUT_DIR }}/arch/arm64/boot/Image
          if-no-files-found: ignore
          retention-days: 7

      - name: üíô Upload Image.gz
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}-Image.gz
          path: ${{ env.OUT_DIR }}/arch/arm64/boot/Image.gz
          if-no-files-found: ignore
          retention-days: 7

      - name: üíú Upload dtb
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}-dtb
          path: ${{ env.OUT_DIR }}/arch/arm64/boot/dtb
          if-no-files-found: ignore
          retention-days: 7

      - name: ‚ò¢Ô∏è Upload output directory
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}-Output
          path: ${{ env.OUT_DIR }}/arch/arm64/boot/
          retention-days: 7
